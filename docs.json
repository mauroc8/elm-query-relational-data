[{"name":"Query","comment":"\n\n@docs Query, perform\n\n\n# Query elements by id\n\nQueries to fetch a single element from a collection.\n\n@docs dictByKey, listByIndex, arrayByIndex\n\n\n# Query elements with conditions\n\nQueries to conditionally fetch elements.\n\n@docs dictValues, listItems, arrayItems\n\nQueries to get the id of an element that passes a condition.\n\n@docs dictKey, listIndex, arrayIndex\n\n\n# Transform, chain and combine queries\n\n@docs map, map2, map3, andThen, orElse\n\n\n## Additional mapping functions\n\n@docs map4, map5, map6, map7, andMap\n\n\n# More helpers\n\n@docs fromMaybe, fromResult\n\n\n## List\n\n@docs combineList, traverseList\n\n\n## Dict\n\n@docs combineDict, traverseDict\n\n\n## Array\n\n@docs combineArray, traverseArray\n\n\n# Fancy building blocks\n\n@docs succeed, fail, identity\n\n\n# Debug\n\n@docs debug\n\n","unions":[],"aliases":[{"name":"Query","comment":" A **query** describes how to get a _value_ from a _database_.\nA database is expected to be a record with many Dicts and Lists, typically your model.\n\n    type alias Model =\n        { ... }\n\n    querySomeUser : Query Model User\n\nUnlike queries in [Query.Advanced](Query.Advanced), the queries in this module\ndo not keep track of errors.\n\n","args":["database","value"],"type":"Query.Advanced.Query database () value"}],"values":[{"name":"andMap","comment":" ","type":"Query.Query db a -> Query.Query db (a -> b) -> Query.Query db b"},{"name":"andThen","comment":" Chain two queries together. For example, given the query defined in [map3](Query#map3),\nwe can build a query that fetches a post _and then_ fetches the user of that post.\n\n    queryPost : Int -> Query Model (Post Int)\n    queryPost =\n        Query.dictByKey .posts\n\n    queryPostWithUser : Int -> Query Model (Post User)\n    queryPostWithUser postId =\n        queryPost postId\n            |> Query.andThen queryUserOfPost\n\n","type":"(a -> Query.Query db b) -> Query.Query db a -> Query.Query db b"},{"name":"arrayByIndex","comment":" Similar to [listByIndex](Query#listByIndex), query an element from an array\nby its index.\n","type":"(db -> Array.Array a) -> Basics.Int -> Query.Query db a"},{"name":"arrayIndex","comment":" Query the index of the first element in the Array that passes the condition.\n","type":"(db -> Array.Array a) -> (a -> Basics.Bool) -> Query.Query db Basics.Int"},{"name":"arrayItems","comment":" Similar to [dictValues](Query#dictValues). Query the items of an Array that pass\nthe condition.\n","type":"(db -> Array.Array a) -> (a -> Basics.Bool) -> Query.Query db (Array.Array a)"},{"name":"combineArray","comment":" See [combineList](Query#combineList).\n","type":"Array.Array (Query.Query db a) -> Query.Query db (Array.Array a)"},{"name":"combineDict","comment":" Combine a Dict of Queries into a single query.\nIf any of those queries fail, the resulting query will fail.\n","type":"Dict.Dict comparable (Query.Query db a) -> Query.Query db (Dict.Dict comparable a)"},{"name":"combineList","comment":" Combines a list of queries into a single query.\nIf any of the list queries fail, the resulting query will fail.\n\n    queryPosts : List Int -> Query Model (List Post)\n    queryPosts idList =\n        List.map queryPost idList\n            |> Query.combineList\n\n","type":"List.List (Query.Query db a) -> Query.Query db (List.List a)"},{"name":"debug","comment":" Pipeline friendly function to log the inner state of a query.\nUseful when a query fails and you don't know why!\n\nFor example, if the following query fails, we can log the intermediate state\nto know if the error is in the first query or not.\n\n    Query.dictByKey .films filmId\n        |> Query.debug Debug.log \"Film\"\n        |> Query.andThen queryFilmActors\n\n","type":"(String.String -> Maybe.Maybe a -> Maybe.Maybe a) -> String.String -> Query.Query db a -> Query.Query db a"},{"name":"dictByKey","comment":" Query a Dict's value using a key.\nThe first argument is a function that selects a Dict from the database.\n\n    type alias Database =\n        { movies : Dict Int Movie\n        }\n\n    queryMovieById moveId =\n        Query.dictByKey .movies movieId\n\n","type":"(db -> Dict.Dict comparable a) -> comparable -> Query.Query db a"},{"name":"dictKey","comment":" Query the first key of a Dict whose value matches the condition.\n\nThis can be used to query a user's id given their email:\n\n    userIdQuery : String -> Query db Int\n    userIdQuery email =\n        Query.dictKey .users (\\user -> user.email == email)\n\n> **Note**: The search starts in the lower element.\n\n","type":"(db -> Dict.Dict comparable a) -> (a -> Basics.Bool) -> Query.Query db comparable"},{"name":"dictValues","comment":" Get all elements of a Dict that satisfy certain condition.\n\nFor example, to get all posts written by some user:\n\n    userPostsQuery userId =\n        Query.dictValues .posts\n            (\\post -> post.author == userId)\n\n","type":"(db -> Dict.Dict comparable a) -> (a -> Basics.Bool) -> Query.Query db (List.List a)"},{"name":"fail","comment":" A query that always fails. For example, we could\nmake a Query from a [RemoteData](https://package.elm-lang.org/packages/ohanhi/remotedata-http/latest/) like this:\n\n    fromRemoteData remoteData =\n        case remoteData of\n            Success value ->\n                Query.succeed value\n\n            _ ->\n                Query.fail\n\n","type":"Query.Query db a"},{"name":"fromMaybe","comment":" Build a Query from a Maybe. The resulting\nquery will succeed only if the Maybe is `Just`.\n","type":"Maybe.Maybe a -> Query.Query db a"},{"name":"fromResult","comment":" Build a Query from a Result. The resulting\nquery will succeed only if the Result is `Ok`.\n","type":"Result.Result x a -> Query.Query db a"},{"name":"identity","comment":" A query that fetches the whole database.\nUse it as a starting point to build more useful queries.\n\n    type alias Model =\n        { posts : Result Error (Dict Int Post)\n        }\n\n    queryPost : Int -> Query Model Post\n    queryPost postId =\n        Query.identity\n            |> Query.andThen (Query.fromResult << .posts)\n            |> Query.andThen (Query.fromMaybe << Dict.get postId)\n\n","type":"Query.Query db db"},{"name":"listByIndex","comment":" Query a List by its index. If the index is outside the range of the List, the query will fail.\n\n    database =\n        { superheroes = [ \"Batman\", \"Spiderman\" ]\n        }\n\n    querySuperhero index =\n        Query.listByIndex .superheroes index\n\n    > Query.perform (querySuperhero 0) database\n    Just \"Batman\"\n\n    > Query.perform (querySuperhero 1) database\n    Just \"Spiderman\"\n\n    > Query.perform (querySuperhero 2) database\n    Nothing\n\n","type":"(db -> List.List a) -> Basics.Int -> Query.Query db a"},{"name":"listIndex","comment":" Query the index of the first element in the List that passes the condition.\n","type":"(db -> List.List a) -> (a -> Basics.Bool) -> Query.Query db Basics.Int"},{"name":"listItems","comment":" Similar to [dictValues](Query#dictValues). Query the items of a List that pass\nthe condition.\n","type":"(db -> List.List a) -> (a -> Basics.Bool) -> Query.Query db (List.List a)"},{"name":"map","comment":" Transform the value of a Query using a function.\n\n    queryUserName : Int -> Query Model String\n    queryUserName userId =\n        queryUser userId\n            |> Query.map (\\user -> user.name)\n\n","type":"(a -> b) -> Query.Query db a -> Query.Query db b"},{"name":"map2","comment":" Combine two queries using a function.\nIf any of the queries fails, the combined query will also fail!\n\n    userWithPostsQuery : Int -> Query Model ( User, List Post )\n    userWithPostsQuery userId =\n        Query.map2 Tuple.pair\n            (userQuery userId)\n            (userPostsQuery userId)\n\n","type":"(a -> b -> value) -> Query.Query db a -> Query.Query db b -> Query.Query db value"},{"name":"map3","comment":" Combine three queries using a function. Similar to [map2](Query#map2).\n\n    type alias Post user =\n        { author : user\n        , title : String\n        , content : String\n        }\n\n    queryUserOfPost : Post Int -> Query Model (Post User)\n    queryUserOfPost post =\n        Query.map3 Post\n            (queryUser post.author)\n            (Query.succeed post.title)\n            (Query.succeed post.content)\n\n","type":"(a -> b -> c -> value) -> Query.Query db a -> Query.Query db b -> Query.Query db c -> Query.Query db value"},{"name":"map4","comment":" ","type":"(a -> b -> c -> d -> value) -> Query.Query db a -> Query.Query db b -> Query.Query db c -> Query.Query db d -> Query.Query db value"},{"name":"map5","comment":" ","type":"(a -> b -> c -> d -> e -> value) -> Query.Query db a -> Query.Query db b -> Query.Query db c -> Query.Query db d -> Query.Query db e -> Query.Query db value"},{"name":"map6","comment":" ","type":"(a -> b -> c -> d -> e -> f -> value) -> Query.Query db a -> Query.Query db b -> Query.Query db c -> Query.Query db d -> Query.Query db e -> Query.Query db f -> Query.Query db value"},{"name":"map7","comment":" ","type":"(a -> b -> c -> d -> e -> f -> g -> value) -> Query.Query db a -> Query.Query db b -> Query.Query db c -> Query.Query db d -> Query.Query db e -> Query.Query db f -> Query.Query db g -> Query.Query db value"},{"name":"orElse","comment":" Try a different query in case of failure. For example, to\nquery the posts of a user _or else_ query all posts, we can write:\n\n    queryPostsOfUser userId\n        |> Query.orElse (\\_ -> queryAllPosts)\n\n","type":"(() -> Query.Query db a) -> Query.Query db a -> Query.Query db a"},{"name":"perform","comment":" Given a query and a database, perform the query.\n\n    case Query.perform querySomeUser model of\n        Just user ->\n            viewUser user\n\n        Nothing ->\n            Element.text \"The requested user doesn't exist!\"\n\nA query that fails gives no information on why it failed!\n\nYou can use [debug](Query#debug) to debug your queries,\nor [Query.Advanced](Query.Advanced) to handle errors explicitly.\n\n","type":"Query.Query db a -> db -> Maybe.Maybe a"},{"name":"succeed","comment":" A query that always succeeds with the given value.\n\nThis means that performimg such query always results in `Just` the given value.\n\nThe `succeed` function can be useful to combine query values with non-query values.\nSee [map3](Query#map3) for an example.\n\n","type":"a -> Query.Query db a"},{"name":"traverseArray","comment":" See [traverseList](Query#traverseList).\n","type":"(a -> Query.Query db b) -> Array.Array a -> Query.Query db (Array.Array b)"},{"name":"traverseDict","comment":" Map each key-value pair of a Dict to a Query, and then combine the Dict\ninto a Query using [combineDict](Query#combineDict).\n","type":"(comparable -> a -> Query.Query db b) -> Dict.Dict comparable a -> Query.Query db (Dict.Dict comparable b)"},{"name":"traverseList","comment":" Similar to [combineList](Query#combineList), it transforms\na List into a Query. The difference is that it maps the list\nbefore doing it. This is what you need to do most of the times.\n\nFor example, we can rewrite the function we defined in [combineList](Query#combineList):\n\n    queryPosts =\n        Query.traverseList queryPost\n\n","type":"(a -> Query.Query db b) -> List.List a -> Query.Query db (List.List b)"}],"binops":[]},{"name":"Query.Advanced","comment":"\n\n@docs Query, perform, mapError\n\n---\n\n**Most of the following functions are identical to those in [Query](Query).\nWhenever the API is the same, the documentation will be blank.**\n\n---\n\n\n# Query elements by id\n\nQueries to fetch a single element from a collection.\n\n@docs dictByKey, listByIndex, arrayByIndex\n\n\n# Query elements with conditions\n\nQueries to conditionally fetch elements.\n\n@docs dictValues, listItems, arrayItems\n\nQueries to get the id of an element that passes a condition.\n\n@docs dictKey, listIndex, arrayIndex\n\n\n# Transform, chain and combine queries\n\n@docs map, map2, map3, andThen, orElse\n\n\n## Additional mapping functions\n\n@docs map4, map5, map6, map7, andMap\n\n\n# More helpers\n\n@docs fromMaybe, fromResult\n\n\n## List\n\n@docs combineList, traverseList\n\n\n## Dict\n\n@docs combineDict, traverseDict\n\n\n## Array\n\n@docs combineArray, traverseArray\n\n\n# Fancy building blocks\n\n@docs succeed, fail, identity\n\n\n# Debug\n\n@docs debug\n\n","unions":[{"name":"Query","comment":" An advanced Query that contains explicit error information.\n\nAll query functions that could fail will be required to give an `error`.\n\n    queryUser : Int -> Query Model String User\n    queryUser userId =\n        Query.dictByKey \"User not found\" .users userId\n\nYou might want a custom type to keep track of errors:\n\n    type QueryError\n        = UserNotFound Int\n        | PostNotFound Int\n        | CommentNotFound Int\n\n","args":["database","error","value"],"cases":[]}],"aliases":[],"values":[{"name":"andMap","comment":" ","type":"Query.Advanced.Query db x a -> Query.Advanced.Query db x (a -> b) -> Query.Advanced.Query db x b"},{"name":"andThen","comment":" ","type":"(a -> Query.Advanced.Query db x b) -> Query.Advanced.Query db x a -> Query.Advanced.Query db x b"},{"name":"arrayByIndex","comment":" Similar to [listByIndex](Query.Advanced#listByIndex), query an element from an Array\nby its index. If the index is out of bounds, the query fails with the given error.\n","type":"error -> (db -> Array.Array a) -> Basics.Int -> Query.Advanced.Query db error a"},{"name":"arrayIndex","comment":" ","type":"error -> (db -> Array.Array a) -> (a -> Basics.Bool) -> Query.Advanced.Query db error Basics.Int"},{"name":"arrayItems","comment":" ","type":"(db -> Array.Array a) -> (a -> Basics.Bool) -> Query.Advanced.Query db x (Array.Array a)"},{"name":"combineArray","comment":" ","type":"Array.Array (Query.Advanced.Query db x a) -> Query.Advanced.Query db x (Array.Array a)"},{"name":"combineDict","comment":" ","type":"Dict.Dict comparable (Query.Advanced.Query db x a) -> Query.Advanced.Query db x (Dict.Dict comparable a)"},{"name":"combineList","comment":" ","type":"List.List (Query.Advanced.Query db x a) -> Query.Advanced.Query db x (List.List a)"},{"name":"debug","comment":" ","type":"(String.String -> Result.Result x a -> Result.Result x a) -> String.String -> Query.Advanced.Query db x a -> Query.Advanced.Query db x a"},{"name":"dictByKey","comment":" Query a Dict's value using a key.\nIt takes an error in case the key is missing from the Dict.\n\n    type alias Database =\n        { movies : Dict Int Movie\n        }\n\n    type QueryError\n        = MissingMovie Int\n\n    queryMovieById moveId =\n        Query.dictByKey (MissingMovie movieId) .movies movieId\n\n","type":"error -> (db -> Dict.Dict comparable a) -> comparable -> Query.Advanced.Query db error a"},{"name":"dictKey","comment":" Query the first key of a Dict whose value passes the condition.\nIf no elements pass the condition, the query fails with the given error.\n","type":"error -> (db -> Dict.Dict comparable a) -> (a -> Basics.Bool) -> Query.Advanced.Query db error comparable"},{"name":"dictValues","comment":" ","type":"(db -> Dict.Dict comparable a) -> (a -> Basics.Bool) -> Query.Advanced.Query db x (List.List a)"},{"name":"fail","comment":" A query that always fails with a given error.\n\nFor example, we could make a Query from a [RemoteData](https://package.elm-lang.org/packages/ohanhi/remotedata-http/latest/) like this:\n\n    fromRemoteData : error -> RemoteData error a -> Query db error a\n    fromRemoteData fallbackError remoteData =\n        case remoteData of\n            Success value ->\n                Query.succeed value\n\n            Failure e ->\n                Query.fail e\n\n            _ ->\n                Query.fail fallbackError\n\n","type":"error -> Query.Advanced.Query db error a"},{"name":"fromMaybe","comment":" Build a Query from a Maybe. The resulting\nquery will succeed only if the Maybe is `Just`.\nThe query fails with the given error if the Maybe is `Nothing`.\n","type":"error -> Maybe.Maybe a -> Query.Advanced.Query db error a"},{"name":"fromResult","comment":" ","type":"Result.Result x a -> Query.Advanced.Query db x a"},{"name":"identity","comment":" ","type":"Query.Advanced.Query db x db"},{"name":"listByIndex","comment":" Query the List's item at a specific index. If the index is out of bounds, fail with the given error.\n\n    database =\n        { superheroes = [ \"Batman\", \"Spiderman\" ]\n        }\n\n    querySuperhero index =\n        Query.listByIndex (MissingSuperhero index) .superheroes index\n\n    > Query.perform (querySuperhero 0) database\n    Ok \"Batman\"\n\n    > Query.perform (querySuperhero 1) database\n    Ok \"Spiderman\"\n\n    > Query.perform (querySuperhero 2) database\n    MissingSuperhero 2\n\n","type":"error -> (db -> List.List a) -> Basics.Int -> Query.Advanced.Query db error a"},{"name":"listIndex","comment":" ","type":"error -> (db -> List.List a) -> (a -> Basics.Bool) -> Query.Advanced.Query db error Basics.Int"},{"name":"listItems","comment":" ","type":"(db -> List.List a) -> (a -> Basics.Bool) -> Query.Advanced.Query db x (List.List a)"},{"name":"map","comment":" ","type":"(a -> b) -> Query.Advanced.Query db x a -> Query.Advanced.Query db x b"},{"name":"map2","comment":" ","type":"(a -> b -> value) -> Query.Advanced.Query db x a -> Query.Advanced.Query db x b -> Query.Advanced.Query db x value"},{"name":"map3","comment":" ","type":"(a -> b -> c -> value) -> Query.Advanced.Query db x a -> Query.Advanced.Query db x b -> Query.Advanced.Query db x c -> Query.Advanced.Query db x value"},{"name":"map4","comment":" ","type":"(a -> b -> c -> d -> value) -> Query.Advanced.Query db x a -> Query.Advanced.Query db x b -> Query.Advanced.Query db x c -> Query.Advanced.Query db x d -> Query.Advanced.Query db x value"},{"name":"map5","comment":" ","type":"(a -> b -> c -> d -> e -> value) -> Query.Advanced.Query db x a -> Query.Advanced.Query db x b -> Query.Advanced.Query db x c -> Query.Advanced.Query db x d -> Query.Advanced.Query db x e -> Query.Advanced.Query db x value"},{"name":"map6","comment":" ","type":"(a -> b -> c -> d -> e -> f -> value) -> Query.Advanced.Query db x a -> Query.Advanced.Query db x b -> Query.Advanced.Query db x c -> Query.Advanced.Query db x d -> Query.Advanced.Query db x e -> Query.Advanced.Query db x f -> Query.Advanced.Query db x value"},{"name":"map7","comment":" ","type":"(a -> b -> c -> d -> e -> f -> g -> value) -> Query.Advanced.Query db x a -> Query.Advanced.Query db x b -> Query.Advanced.Query db x c -> Query.Advanced.Query db x d -> Query.Advanced.Query db x e -> Query.Advanced.Query db x f -> Query.Advanced.Query db x g -> Query.Advanced.Query db x value"},{"name":"mapError","comment":" Map the error of a Query.\n","type":"(error -> x) -> Query.Advanced.Query db error a -> Query.Advanced.Query db x a"},{"name":"orElse","comment":" Just like [Query.orElse](Query#orElse), try a different query\nin case of failure. Except we get to use the query's error to build\nthe new query.\n\nFor example, if we ask the name of an inexistent user, maybe we want to\ndefault to an error message:\n\n    queryUserName userId\n        |> Query.orElse\n            (\\(NotFound id) ->\n                Query.succeed <|\n                    \"The user \"\n                        ++ String.fromInt\n                        ++ \" doesn't exist.\"\n            )\n\n","type":"(error -> Query.Advanced.Query db x a) -> Query.Advanced.Query db error a -> Query.Advanced.Query db x a"},{"name":"perform","comment":" Given a query and a database, perform the query.\n\n    case Query.perform querySomeUser model of\n        Ok user ->\n            viewUser user\n\n        Err message ->\n            Element.text message\n\n","type":"Query.Advanced.Query db x a -> db -> Result.Result x a"},{"name":"succeed","comment":" ","type":"a -> Query.Advanced.Query db x a"},{"name":"traverseArray","comment":" ","type":"(a -> Query.Advanced.Query db x b) -> Array.Array a -> Query.Advanced.Query db x (Array.Array b)"},{"name":"traverseDict","comment":" ","type":"(comparable -> a -> Query.Advanced.Query db x b) -> Dict.Dict comparable a -> Query.Advanced.Query db x (Dict.Dict comparable b)"},{"name":"traverseList","comment":" ","type":"(a -> Query.Advanced.Query db x b) -> List.List a -> Query.Advanced.Query db x (List.List b)"}],"binops":[]}]